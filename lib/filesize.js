// Generated by CoffeeScript 1.8.0
var __slice = [].slice;

module.exports = {
  format: function(value, decimal, options) {
    var name, power, ref, stop, _i, _len, _ref, _ref1, _ref2;
    if (decimal == null) {
      decimal = 0;
    }
    if (options == null) {
      options = {};
    }
    if (arguments.length === 2) {
      options = decimal;
      decimal = 0;
    }
    decimal = Math.pow(10, decimal);
    if (options.bit || ((_ref = options.unit) != null ? _ref[1] : void 0) === 'b') {
      value *= 8;
    }
    _ref1 = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];
    for (power = _i = 0, _len = _ref1.length; _i < _len; power = ++_i) {
      name = _ref1[power];
      ref = Math.pow(1024, power + 1);
      name += options.bit || ((_ref2 = options.unit) != null ? _ref2[1] : void 0) === 'b' ? 'b' : 'B';
      stop = options.unit ? options.unit === name : value < ref;
      if (stop) {
        return "" + (Math.round((value / Math.pow(1024, power)) * decimal) / decimal) + " " + name;
      }
    }
  },
  parse: function(value, options) {
    var match, name, power, _i, _j, _len, _len1, _ref, _ref1;
    if (options == null) {
      options = {};
    }
    switch (typeof value) {
      case 'number':
        return value;
      case 'string':
        if (match = /^\s*(.+?)\s*?(K|M|G|T|E|Z|Y)?(B|b)\s*$/.exec(value)) {
          if ((options.bit != null) && (options.unit != null)) {
            throw Error('Incompatible option bit and unit');
          }
          value = match[1];
          _ref = ['K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];
          for (power = _i = 0, _len = _ref.length; _i < _len; power = ++_i) {
            name = _ref[power];
            if (name === match[2]) {
              value *= Math.pow(1024, power + 1);
              break;
            }
          }
          if (match[3] === 'b') {
            value /= 8;
          }
          if (options.bit) {
            value *= 8;
          }
          if (options.unit) {
            _ref1 = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];
            for (power = _j = 0, _len1 = _ref1.length; _j < _len1; power = ++_j) {
              name = _ref1[power];
              if (options.unit === ("" + name + "B")) {
                value = value / Math.pow(1024, power);
              } else if (options.unit === ("" + name + "b")) {
                value = 8 * value / Math.pow(1024, power);
              }
            }
          }
          return value;
        } else {
          throw Error("Invalid value " + (JSON.stringify(value)));
        }
        break;
      default:
        throw Error("Invalid value " + (JSON.stringify(value)));
    }
  },
  compare: function() {
    var i, options, ref, value, values, _i, _j, _ref;
    values = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
    ref = module.exports.parse(values[0], options);
    for (i = _j = 1, _ref = values.length; 1 <= _ref ? _j < _ref : _j > _ref; i = 1 <= _ref ? ++_j : --_j) {
      value = module.exports.parse(values[i], options);
      if (value !== ref) {
        return false;
      }
    }
    return true;
  }
};
